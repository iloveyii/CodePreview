@using Accounting.Shared
@using Accounting.Client.Components
@using Accounting.Client.Services
@using Accounting.Client.Authentication
@using Microsoft.AspNetCore.Components.Authorization;
@inject HttpClient Http
@inject IDataService dataService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


<div id="earningsContainer" class="card">
    <div class="card-header">
        Add an earning
    </div>
    <div class="card-body">
        <EditForm Model="@earning" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group mt-2">
                <label for="dateInput">Date</label>
                <InputDate class="form-control" id="dateInput" @bind-Value="earning.Date" />
            </div>
            <div class="form-group mt-2">
                <label for="subjectInput">Subject</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="earning.Subject" />
            </div>
            <div class="form-group mt-2">
                <label for="categoryInput">Category</label>
                <InputSelect class="form-control" id="categoryInput" @bind-Value="earning.Category">
                    @{
                        foreach(var value in Enum.GetValues(typeof(EarningCategory)))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="form-group mt-2">
                <label for="amountInput">Amount</label>
                <InputNumber class="form-control" id="amountInput" @bind-Value="earning.Amount" />
            </div>
            <div class="mt-3">
                <button id="submitEarnings" type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private EarningModel earning = new EarningModel { Date = DateTime.Today };

    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    public async Task HandleValidSubmit()
    {
        await dataService.AddEarning(earning);
        await OnSubmitCallback.InvokeAsync();
    }
}
