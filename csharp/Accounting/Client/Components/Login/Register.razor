@page "/register"
@using Accounting.Shared
@using Accounting.Client.Authentication
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.SessionStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js
@inject IToastService toastService
@inject ISessionStorageService sessionStorage


<div class="row mt-5">
    <div class="col-lg-4 offset-lg-4 pt-3 border d-grid gap-2 col-md-6 offset-md-3">
        <div class="mb-3 text-center">
            <h3>Register</h3>
        </div>

        <div class="mb-3">
            <label>User Name</label>
            <input @bind="loginRequest.UserName" class="form-control" placeholder="User Name: admin, user" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password: admin, user" />
        </div>
        <div class="mb-3 pb-3 d-grid gap-2">
            <button class="btn btn-primary" @onclick="RegisterUser">Register</button>
        </div>

    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();

    private async Task RegisterUser()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Register", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var response = await loginResponse.Content.ReadFromJsonAsync<Response>();
            if(response.Status == "Success")
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(response.UserSession);
                toastService.ShowInfo(response.Message);
                toastService.ShowInfo("Redirecting...");
                await sessionStorage.SetItemAsStringAsync("toast", response.Message);
                navManager.NavigateTo("/", true);
            } else
            {
                toastService.ShowError(response.Message);
                // await js.InvokeVoidAsync("alert", response.Message);
            }
        }
        else if (loginResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}
